import { signInWithCustomToken } from 'firebase/auth';
import { auth } from '../config/firebase';

export const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3000';

interface LoginRequest {
  username: string;
  password: string;
}

interface LoginResponse {
  success: boolean;
  user?: {
    id: string;
    username: string;
    email: string;
    role: 'admin' | 'user';
  };
  customToken?: string;
  refreshToken?: string;
  message?: string;
}

interface RefreshResponse {
  success: boolean;
  token?: string;
  message?: string;
}

interface VerifyResponse {
  success: boolean;
  user?: {
    id: string;
    username: string;
    email: string;
    role: 'admin' | 'user';
  };
  message?: string;
}

interface ProfileResponse {
  success: boolean;
  user?: {
    id: string;
    username: string;
    email: string;
    role: 'admin' | 'user';
  };
  message?: string;
}

class AuthAPI {
  private getAuthHeaders(): HeadersInit {
    const token = localStorage.getItem('authToken');
    return {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` })
    };
  }

  async login(credentials: LoginRequest): Promise<LoginResponse> {
    try {
      console.log('üîê AuthAPI - attempting login with:', { username: credentials.username });
      
      // Map username to email for backend compatibility
      const apiCredentials = {
        email: credentials.username,
        password: credentials.password
      };
      
      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(apiCredentials),
      });

      const data = await response.json();
      
      if (response.ok && data.success) {
        const customToken = data.data?.customToken || data.data?.token || data.customToken || data.token;
        
        if (!customToken) {
          return {
            success: false,
            message: 'No custom token received from backend'
          };
        }

        const userCredential = await signInWithCustomToken(auth, customToken);
        const idToken = await userCredential.user.getIdToken();
        localStorage.setItem('authToken', idToken);
        
        if (data.refreshToken) {
          localStorage.setItem('refreshToken', data.refreshToken);
        }
        
        return {
          success: true,
          user: data.data?.user || data.user,
          customToken: customToken
        };
      }

      return {
        success: false,
        message: data.message || 'Login failed'
      };
    } catch (error) {
      console.error('üîê AuthAPI - login error:', error);
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Authentication failed'
      };
    }
  }

  async refresh(): Promise<RefreshResponse> {
    try {
      console.log('üîÑ AuthAPI - starting refresh process');
      
      // Try Firebase token refresh first if we have a user
      if (auth.currentUser) {
        try {
          console.log('üîÑ AuthAPI - refreshing Firebase ID token');
          const newIdToken = await auth.currentUser.getIdToken(true); // Force refresh
          if (newIdToken) {
            localStorage.setItem('authToken', newIdToken);
            console.log('‚úÖ AuthAPI - Firebase token refresh successful');
            return {
              success: true,
              token: newIdToken
            };
          }
        } catch (firebaseError) {
          console.warn('‚ö†Ô∏è AuthAPI - Firebase refresh failed:', firebaseError);
          // Continue to backend refresh
        }
      }
      
      // Try backend refresh
      const refreshToken = localStorage.getItem('refreshToken');
      if (!refreshToken) {
        console.log('‚ùå AuthAPI - no refresh token available');
        throw new Error('No refresh token available');
      }
      
      console.log('üîÑ AuthAPI - attempting backend token refresh');
      const response = await fetch(`${API_BASE_URL}/api/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ refreshToken }),
      });

      if (!response.ok) {
        throw new Error(`Refresh failed with status ${response.status}`);
      }

      const data = await response.json();
      if (!data.success) {
        throw new Error(data.message || 'Token refresh failed');
      }
      
      if (!data.token) {
        throw new Error('No token in refresh response');
      }

      // Handle JWT token
      if (data.token.startsWith('eyJ') && data.token.split('.').length === 3) {
        localStorage.setItem('authToken', data.token);
        if (data.refreshToken) {
          localStorage.setItem('refreshToken', data.refreshToken);
        }
        return {
          success: true,
          token: data.token
        };
      }

      // Handle custom Firebase token
      try {
        const userCredential = await signInWithCustomToken(auth, data.token);
        const idToken = await userCredential.user.getIdToken();
        localStorage.setItem('authToken', idToken);
        if (data.refreshToken) {
          localStorage.setItem('refreshToken', data.refreshToken);
        }
        return {
          success: true,
          token: idToken
        };
      } catch (error) {
        throw error;
      }
    } catch (error) {
      console.error('‚ùå AuthAPI - refresh error:', error);
      localStorage.removeItem('authToken');
      localStorage.removeItem('refreshToken');
      return {
        success: false,
        message: error instanceof Error ? error.message : 'Authentication refresh failed'
      };
    }
  }

  async verify(): Promise<VerifyResponse> {
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/verify`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Verify API error:', error);
      return {
        success: false,
        message: 'Network error occurred during verification'
      };
    }
  }

  async logout(): Promise<{ success: boolean; message?: string }> {
    try {
      console.log('üö™ AuthAPI - logging out');
      
      // Sign out from Firebase
      if (auth.currentUser) {
        await auth.signOut();
        console.log('‚úÖ AuthAPI - Firebase sign out successful');
      }
      
      const token = localStorage.getItem('authToken');
      
      // Clear local storage first
      localStorage.removeItem('authToken');
      localStorage.removeItem('refreshToken');
      
      // Only make API call if we have a token
      if (token) {
        const response = await fetch(`${API_BASE_URL}/api/auth/logout`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
        });

        // Handle 401 errors gracefully (token already invalid)
        if (response.status === 401) {
          return {
            success: true,
            message: 'Logged out successfully (token was already invalid)'
          };
        }

        if (response.ok) {
          const data = await response.json();
          return data.success ? data : {
            success: true,
            message: 'Logged out successfully'
          };
        }
      }

      return {
        success: true,
        message: 'Logged out successfully'
      };
    } catch (error) {
      console.error('‚ùå AuthAPI - logout error:', error);
      // Ensure local storage is cleared on error
      localStorage.removeItem('authToken');
      localStorage.removeItem('refreshToken');
      
      return {
        success: true,
        message: 'Logged out successfully (local cleanup completed)'
      };
    }
  }

  async getProfile(): Promise<ProfileResponse> {
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/profile`, {
        method: 'GET',
        headers: this.getAuthHeaders(),
      });

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Profile API error:', error);
      return {
        success: false,
        message: 'Network error occurred while fetching profile'
      };
    }
  }
}

export const authAPI = new AuthAPI();
export type { LoginRequest, LoginResponse, RefreshResponse, VerifyResponse, ProfileResponse };
